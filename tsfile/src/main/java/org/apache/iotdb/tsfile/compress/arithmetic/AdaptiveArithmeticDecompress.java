/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.iotdb.tsfile.compress.arithmetic;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;

/**
 * Decompression application using adaptive arithmetic coding.
 *
 * <p>Usage: java AdaptiveArithmeticDecompress InputFile OutputFile
 *
 * <p>This decompresses files generated by the "AdaptiveArithmeticCompress" application.
 */
public class AdaptiveArithmeticDecompress {

  public static void main(String[] args) throws IOException {
    // Handle command line arguments
    if (args.length != 2) {
      System.err.println("Usage: java AdaptiveArithmeticDecompress InputFile OutputFile");
      System.exit(1);
      return;
    }
    File inputFile = new File(args[0]);
    File outputFile = new File(args[1]);

    // Perform file decompression
    try (BitInputStream in =
            new BitInputStream(new BufferedInputStream(new FileInputStream(inputFile)));
        OutputStream out = new BufferedOutputStream(new FileOutputStream(outputFile))) {
      decompress(in, out);
    }
  }

  // To allow unit testing, this method is package-private instead of private.
  static void decompress(BitInputStream in, OutputStream out) throws IOException {
    FlatFrequencyTable initFreqs = new FlatFrequencyTable(257);
    FrequencyTable freqs = new SimpleFrequencyTable(initFreqs);
    ArithmeticDecoder dec = new ArithmeticDecoder(32, in);
    while (true) {
      // Decode and write one byte
      int symbol = dec.read(freqs);
      if (symbol == 256) // EOF symbol
      break;
      out.write(symbol);
      freqs.increment(symbol);
    }
    out.flush();
  }
}
